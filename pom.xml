<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.laihan</groupId>
	<artifactId>platform</artifactId>
	<version>1.0.1</version>
	<name>platform</name>

	<!-- maven server ipaddress -->
	<repositories>
		<repository>
			<id>nexus-aliyun</id>
			<name>Nexus aliyun</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java-version>1.8</java-version>
		<hawtbuf.version>1.11</hawtbuf.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>1.4.7.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.fusesource.hawtbuf</groupId>
			<artifactId>hawtbuf</artifactId>
			<version>${hawtbuf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-kahadb-store</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-broker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-openwire-legacy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7-1</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>${java-version}</source>
					<target>${java-version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.0.2</version>
				<configuration>
					<outputDirectory>${project.build.directory}/${project.artifactId}/</outputDirectory>
					<archive>
						<manifest>
							<mainClass>com.laihan.SpringBootRunner</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.artifactId}/libs</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<mkdir dir="${project.build.directory}/${project.artifactId}/logs/" />
								<echo
									file="${project.build.directory}/${project.artifactId}/${project.artifactId}.sh"
									append="false">
<![CDATA[ 
#!/bin/bash
WORK_DIR=$(cd `dirname $0`; pwd);
function findJAVA(){
	if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]]; then
	    JAVAEXE="$JAVA_HOME/bin/java"
	elif type -p java > /dev/null 2>&1; then
	    JAVAEXE=$(type -p java)
	elif [[ -x "/usr/bin/java" ]];  then
	    JAVAEXE="/usr/bin/java"
	else
	    echo "Unable to find Java"
	    exit 1
	fi
}
# Find Java
findJAVA
echo "##"
echo "#SHELL_DIR  ${WORK_DIR}"
echo "#JAVAEXE    ${JAVAEXE}"
echo "##"

# Call the appropriate action function
case "$1" in
	start)
		exit 0;
	stop)
		exit 0;
	restart)
		exit 0;
	status)
		exit 0;
	version)
		echo "Platform Version : ${project.version}"
		exit 0;
	*)
	  echo "Usage: $0 {start|stop|restart|status}"; exit 1;
esac
exit 0
]]>
								</echo>
								<tar destfile="${project.build.directory}/${project.artifactId}.tar">
									<tarfileset dir="${project.build.directory}/${project.artifactId}"
										prefix="${project.artifactId}" excludes="*.sh">
									</tarfileset>
									<tarfileset dir="${project.build.directory}/${project.artifactId}"
										filemode="555" prefix="${project.artifactId}">
										<include name="*.sh" />
									</tarfileset>
								</tar>
								<gzip src="${project.build.directory}/${project.artifactId}.tar"
									destfile="${project.build.directory}/${project.artifactId}.tar.gz" />
								<delete file="${project.build.directory}/${project.artifactId}.tar" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>